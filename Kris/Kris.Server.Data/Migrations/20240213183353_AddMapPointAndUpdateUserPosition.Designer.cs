// <auto-generated />
using System;
using Kris.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kris.Server.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240213183353_AddMapPointAndUpdateUserPosition")]
    partial class AddMapPointAndUpdateUserPosition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kris.Server.Data.Models.MapPointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "SessionId");

                    b.ToTable("MapPoints");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.SessionUserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionUsers");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "CurrentSessionId")
                        .IsUnique()
                        .HasFilter("[CurrentSessionId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.UserPositionEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "SessionId");

                    b.ToTable("UserPositions");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.MapPointEntity", b =>
                {
                    b.HasOne("Kris.Server.Data.Models.SessionUserEntity", "SessionUser")
                        .WithMany("MapPoints")
                        .HasForeignKey("UserId", "SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Kris.Common.Models.GeoPosition", "Position", b1 =>
                        {
                            b1.Property<Guid>("MapPointEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Altitude")
                                .HasColumnType("float");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("MapPointEntityId");

                            b1.ToTable("MapPoints");

                            b1.WithOwner()
                                .HasForeignKey("MapPointEntityId");
                        });

                    b.OwnsOne("Kris.Common.Models.MapPointSymbol", "Symbol", b1 =>
                        {
                            b1.Property<Guid>("MapPointEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Color")
                                .HasColumnType("int");

                            b1.Property<int>("Shape")
                                .HasColumnType("int");

                            b1.Property<int>("Sign")
                                .HasColumnType("int");

                            b1.HasKey("MapPointEntityId");

                            b1.ToTable("MapPoints");

                            b1.WithOwner()
                                .HasForeignKey("MapPointEntityId");
                        });

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("SessionUser");

                    b.Navigation("Symbol")
                        .IsRequired();
                });

            modelBuilder.Entity("Kris.Server.Data.Models.SessionUserEntity", b =>
                {
                    b.HasOne("Kris.Server.Data.Models.SessionEntity", "Session")
                        .WithMany("Users")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Kris.Server.Data.Models.UserEntity", "User")
                        .WithMany("AllSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.UserEntity", b =>
                {
                    b.HasOne("Kris.Server.Data.Models.SessionUserEntity", "CurrentSession")
                        .WithOne()
                        .HasForeignKey("Kris.Server.Data.Models.UserEntity", "Id", "CurrentSessionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentSession");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.UserPositionEntity", b =>
                {
                    b.HasOne("Kris.Server.Data.Models.SessionUserEntity", "SessionUser")
                        .WithOne()
                        .HasForeignKey("Kris.Server.Data.Models.UserPositionEntity", "UserId", "SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Kris.Common.Models.GeoSpatialPosition", "Position_0", b1 =>
                        {
                            b1.Property<Guid>("UserPositionEntityUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserPositionEntitySessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Altitude")
                                .HasColumnType("float");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.HasKey("UserPositionEntityUserId", "UserPositionEntitySessionId");

                            b1.ToTable("UserPositions");

                            b1.WithOwner()
                                .HasForeignKey("UserPositionEntityUserId", "UserPositionEntitySessionId");
                        });

                    b.OwnsOne("Kris.Common.Models.GeoSpatialPosition", "Position_1", b1 =>
                        {
                            b1.Property<Guid>("UserPositionEntityUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserPositionEntitySessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Altitude")
                                .HasColumnType("float");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.HasKey("UserPositionEntityUserId", "UserPositionEntitySessionId");

                            b1.ToTable("UserPositions");

                            b1.WithOwner()
                                .HasForeignKey("UserPositionEntityUserId", "UserPositionEntitySessionId");
                        });

                    b.OwnsOne("Kris.Common.Models.GeoSpatialPosition", "Position_2", b1 =>
                        {
                            b1.Property<Guid>("UserPositionEntityUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserPositionEntitySessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Altitude")
                                .HasColumnType("float");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.HasKey("UserPositionEntityUserId", "UserPositionEntitySessionId");

                            b1.ToTable("UserPositions");

                            b1.WithOwner()
                                .HasForeignKey("UserPositionEntityUserId", "UserPositionEntitySessionId");
                        });

                    b.Navigation("Position_0");

                    b.Navigation("Position_1");

                    b.Navigation("Position_2");

                    b.Navigation("SessionUser");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.SessionEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.SessionUserEntity", b =>
                {
                    b.Navigation("MapPoints");
                });

            modelBuilder.Entity("Kris.Server.Data.Models.UserEntity", b =>
                {
                    b.Navigation("AllSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
